# .graphql extension makes it clear that it contains graphQL code

# Type Query is to READ DATA without modifying 
# NOTE - All Queries must return result/response object 
# right side of the ':' is the response object
type Query {
  # all our Query Types
  
  # an array where each item data type is a CUSTOM type 'Job' Schema
  # AN array of Job Objects 
  jobs: [Job]

  # Query with Arguments which takes Query Variables
  # To return a Single Job Object with specific ID
  # In graphQL, we can pass args to query variables using this syntax & the return type is Job object
  job(id: ID!): Job

  # To return a Single Company Object with Query Variable
  company(id: ID!): Company
}

# SCHEMA TYPES - data types
type Job {
  # graphQL provides a built in type 'ID' which is similar to STRING - sent as a string in json
  # '!' - required, never be NULL
  id: ID!
  title: String
  description: String

  # NOTE - To access data from Job to Company
  # Note - setting up Nested Queries with field - 'company'
  # Linking another data table, similar to foreign key in 'relational' database
  company: Company
}

type Company {
  id: ID!
  name: String
  description: String

  # this field will return array of 'Job' objects
  jobs: [Job]
}

# MUTATION TYPES - Mutation is to change data directly.
type Mutation {
  # id is assigned by the Server, we don't want to pass it from Client
  # NOTE - All mutation must return result/response object just like with Query types

  # createJob(title: String, description: String, companyId: ID) : ID
  # This got Re-factor down below
  # createJob(title: String, description: String, companyId: ID): Job

  # note instead of returning ': ID', we want to return 'Job' object for Client Side 
  # to display New Job Data including all its fields - better choice 
  # By doing this, we can query any Child Schema Child Schema & its FIELDS related to 'Job' object 
  # with SINGLE QUERY instead of TWO - BEST PRACTICE FOR MUTATION

  # Instead of passing three arguments or more, we can pass a 'Single Argument' 
  # that contains all the fields for the Job Object to be created. As arguments, we can only use 'Input Types' 
  # createJob(title: String, description: String, companyId: ID) : Job
  createJob(input: CreateJobInput) : Job
  # note instead of returning ': ID', we want to return 'Job' object for Client Side to display Job Data 
  # 'Input Types' as args from below
}

# NOTE - Things like accepting 'Single Input Argument' for each Mutation are some of the 'Best Practices'
# Input Types are Argument Types to pass into Mutation to avoid passing lots of arguments 
# This will make it lot easier on Client Side to call our APIs
# It's common to name Input Type by adding 'input' at the end  
input CreateJobInput {
  # createJob(title: String, description: String, companyId: ID): Job
  # Arguments are pass down as Fields here
  title: String
  description: String
  # companyId: ID - set up this field from the 'context' in resolver object - resolver.js
}
